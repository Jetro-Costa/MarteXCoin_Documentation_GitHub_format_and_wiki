Addressindex
------------

getaddressbalance
  Returns the balance for an address(es) (requires addressindex to be enabled).
getaddressdeltas
  Returns all changes for an address (requires addressindex to be enabled).
getaddressmempool
  Returns all mempool deltas for an address (requires addressindex to be enabled).
getaddresstxids
  Returns the txids for an address(es) (requires addressindex to be enabled).
getaddressutxos
  Returns all unspent outputs for an address (requires addressindex to be enabled).


Blockchain
----------

getbestblockhash
  Returns the hash of the best (tip) block in the longest blockchain.
getblock "blockhash" ( verbose )
  If verbose is false, returns a string that is serialized, hex-encoded data for block 'hash'. If verbose is true, returns an Object with information about block <hash>.
getblockchaininfo
  Returns an object containing various state info regarding blockchain processing.
getblockcount
  Returns the number of blocks in the longest blockchain.
getblockhash height
  Returns hash of block in best-block-chain at height provided.
getblockhashes timestamp
  Returns array of hashes of blocks within the timestamp range provided.
getblockheader "hash" ( verbose )
  If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'. If verbose is true, returns an Object with information about blockheader <hash>.
getblockheaders "hash" ( count verbose )
  Returns an array of items with information about <count> blockheaders starting from <hash>. If verbose is false, each item is a string that is serialized, hex-encoded data for a single blockheader. If verbose is true, each item is an Object with information about a single blockheader.
getchaintips ( count branchlen )
  Return information about all known tips in the block tree, including the main chain as well as orphaned branches.
getdifficulty
  Returns the proof-of-work difficulty as a multiple of the minimum difficulty.
getmempoolancestors txid (verbose)
  If txid is in the mempool, returns all in-mempool ancestors.
getmempooldescendants txid (verbose)
  If txid is in the mempool, returns all in-mempool descendants.
getmempoolentry txid
  Returns mempool data for given transaction
getmempoolinfo
  Returns details on the active state of the TX memory pool.
getrawmempool ( verbose )
  Returns all transaction ids in memory pool as a json array of string transaction ids.
getspentinfo
  Returns the txid and index where an output is spent.
gettxout "txid" n ( include_mempool )
  Returns details about an unspent transaction output.
gettxoutproof ["txid",...] ( blockhash )
  Returns a hex-encoded proof that "txid" was included in a block. NOTE: By default this function only works sometimes. This is when there is an unspent output in the utxo for this transaction. To make it always work, you need to maintain a transaction index, using the -txindex command line option or specify the block in which the transaction is included manually (by blockhash).
gettxoutsetinfo
  Returns statistics about the unspent transaction output set. Note this call may take some time.

preciousblock "blockhash"
  Treats a block as if it were received before others with the same work. A later preciousblock call can override the effect of an earlier one. The effects of preciousblock are not retained across restarts.
pruneblockchain
  Arguments: 1. "height"       (numeric, required) The block height to prune up to. May be set to a discrete height, or a unix timestamp to prune blocks whose block time is at least 2 hours older than the provided timestamp.
verifychain ( checklevel nblocks )
  Verifies blockchain database.
verifytxoutproof "proof"
  Verifies that a proof points to a transaction in a block, returning the transaction it commits to and throwing an RPC error if the block is not in our best chain


Control
-------

debug ( 0|1|addrman|alert|bench|coindb|db|lock|rand|rpc|selectcoins|mempool|mempoolrej|net|proxy|prune|http|libevent|tor|zmq|martex|anonsend|fastsend|masternode|spork|keepass|mnpayments|gobject )
  Change debug category on the fly. Specify single category or use '+' to specify many.
getinfo
  DEPRECATED. Returns an object containing various state info.
getmemoryinfo
  Returns an object containing information about memory usage.
help ( "command" )
  List all commands, or get help for a specified command.
stop
  Stop MarteX Core server.

Generating
----------

generate nblocks ( maxtries )
  Mine up to nblocks blocks immediately (before the RPC call returns)
generatetoaddress nblocks address (maxtries)
  Mine blocks immediately to a specified address (before the RPC call returns)


MarteX
------

anonsend "command" Available commands:
  start
    Start mixing
  stop
    Stop mixing
  reset       
    Reset mixing

getgovernanceinfo
  Returns an object containing governance parameters.
getpoolinfo
  Returns an object containing mixing pool related information.
getsuperblockbudget index
  Returns the absolute maximum sum of superblock payments allowed.
gobject "command"...
  Manage governance objects Available commands:
    check              
      Validate governance object data (proposal only)
    prepare
      Prepare governance object by signing and creating tx
    submit
      Submit governance object to network
    deserialize
      Deserialize governance object from hex string to JSON
    count 
      Count governance objects and votes (additional param: 'json' or 'all', default: 'json')
    get
      Get governance object by hash
    getvotes           
      Get all votes for a governance object hash (including old votes)
    getcurrentvotes    
      Get only current (tallying) votes for a governance object hash (does not include old votes)
    list
      List governance objects (can be filtered by signal and/or object type)
    diff              
      List differences since last diff
    vote-alias        
      Vote on a governance object by masternode alias (using masternode.conf setup)
    vote-conf          
      Vote on a governance object by masternode configured in MarteX.conf
    vote-many          
      Vote on a governance object by all masternodes (using masternode.conf setup)
masternode "command"...
  Set of commands to execute masternode related actions Available commands:
    count        
      Get information about number of masternodes (DEPRECATED options: 'total', 'ps', 'enabled', 'qualify', 'all')
    current      
      Print info on current masternode winner to be paid the next block (calculated locally)
    genkey       
      Generate new masternodeprivkey
    outputs      
      Print masternode compatible outputs
    start-alias  
      Start single remote masternode by assigned alias configured in masternode.conf
    start-<mode> 
      Start remote masternodes configured in masternode.conf (<mode>: 'all', 'missing', 'disabled')
    status       
      Print masternode status information
    list         
      Print list of all known masternodes (see masternodelist for more info)
    list-conf    
      Print masternode.conf in JSON format
    winner       
      Print info on next masternode winner to vote for
    winners      
      Print list of masternode winners
masternodebroadcast "command"...
  Set of commands to create and relay masternode broadcast messages Available commands:

   create-alias
     Create single remote masternode broadcast message by assigned alias configured in masternode.conf
   create-all
     Create remote masternode broadcast messages for all masternodes configured in masternode.conf
   decode        
     Decode masternode broadcast message
   relay         
     Relay masternode broadcast message to the network
masternodelist ( "mode" "filter" )
  Get a list of masternodes in different modes
mnsync [status|next|reset]
  Returns the sync status, updates to the next step or resets it entirely.
sentinelping version
  Sentinel ping.
spork "command"
  Shows information about current state of sporks. Available commands:

    show
      Show all current spork values
    active
      Show which sporks are active
voteraw <masternode-tx-hash> <masternode-tx-index> <governance-hash> <vote-signal> [yes|no|abstain] <time> <vote-sig>
  Compile and relay a governance vote with provided external signature instead of signing vote internally


Mining
------

getblocktemplate ( TemplateRequest )
  If the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'. It returns data needed to construct a block to work on. For full specification, see BIPs 22, 23, and 9: https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes
getmininginfo
  Returns a json object containing mining-related information.
getnetworkhashps ( nblocks height )
  Returns the estimated network hashes per second based on the last n blocks. Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change. Pass in [height] to estimate the network speed at the time when a certain block was found.
getstakinginfo
  Returns an object containing staking-related information.
prioritisetransaction <txid> <priority delta> <fee delta>
  Accepts the transaction into mined blocks at a higher (or lower) priority
submitblock "hexdata" ( "jsonparametersobject" )
  Attempts to submit new block to network. The 'jsonparametersobject' parameter is currently ignored. See https://en.bitcoin.it/wiki/BIP_0022 for full specification.


Network
-------

addnode "node" "add|remove|onetry"
  Attempts add or remove a node from the addnode list. Or try a connection to a node once.
clearbanned
  Clear all banned IPs.
disconnectnode "address"
  Immediately disconnects from the specified node.
getaddednodeinfo ( "node" )
  Returns information about the given added node, or all added nodes (note that onetry addnodes are not listed here)
getconnectioncount
  Returns the number of connections to other nodes.
getnettotals
  Returns information about network traffic, including bytes in, bytes out, and current time.
getnetworkinfo
  Returns an object containing various state info regarding P2P networking.
getpeerinfo
  Returns data about each connected network node as a json array of objects.
listbanned
  List all banned IPs/Subnets.
ping
  Requests that a ping be sent to all other nodes, to measure ping time. Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds. Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.
setban "subnet" "add|remove" (bantime) (absolute)
  Attempts add or remove a IP/Subnet from the banned list.
setnetworkactive true|false
  Disable/enable all p2p network activity.


Rawtransactions
---------------

createrawtransaction [{"txid":"id","vout":n},...] {"address":amount,"data":"hex",...} ( locktime )
  Create a transaction spending the given inputs and creating new outputs. Outputs can be addresses or data. Returns hex-encoded raw transaction. Note that the transaction's inputs are not signed, and it is not stored in the wallet or transmitted to the network.
decoderawtransaction "hexstring"
  Return a JSON object representing the serialized, hex-encoded transaction.
decodescript "hexstring"
  Decode a hex-encoded script.
fundrawtransaction "hexstring" ( options )
  Add inputs to a transaction until it has enough in value to meet its out value. This will not modify existing inputs, and will add at most one change output to the outputs. No existing outputs will be modified unless "subtractFeeFromOutputs" is specified. Note that inputs which were signed may need to be resigned after completion since in/outputs have been added. The inputs added will not be signed, use signrawtransaction for that. Note that all existing inputs must have their previous output transaction be in the wallet. Note that all inputs selected must be of standard form and P2SH scripts must be in the wallet using importaddress or addmultisigaddress (to calculate fees). You can see whether this is the case by checking the "solvable" field in the listunspent output. Only pay-to-pubkey, multisig, and P2SH versions thereof are currently supported for watch-only
getrawtransaction "txid" ( verbose )
  NOTE: By default this function only works for mempool transactions. If the -txindex option is enabled, it also works for blockchain transactions. DEPRECATED: for now, it also works for transactions with unspent outputs. Return the raw transaction data. If verbose is 'true', returns an Object with information about 'txid'. If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.
sendrawtransaction "hexstring" ( allowhighfees fastsend bypasslimits)
  Submits raw transaction (serialized, hex-encoded) to local node and network. Also see createrawtransaction and signrawtransaction calls.
signrawtransaction "hexstring" ( [{"txid":"id","vout":n,"scriptPubKey":"hex","redeemScript":"hex"},...] ["privatekey1",...] sighashtype )
  Sign inputs for raw transaction (serialized, hex-encoded). The second optional argument (may be null) is an array of previous transaction outputs that this transaction depends on but may not yet be in the block chain. The third optional argument (may be null) is an array of base58-encoded private keys that, if given, will be the only keys used to sign the transaction. Requires wallet passphrase to be set with walletpassphrase call.


Util
----

createmultisig nrequired ["key",...]
  Creates a multi-signature address with n signature of m keys required. It returns a json object with the address and redeemScript.
estimatefee nblocks
  Estimates the approximate fee per kilobyte needed for a transaction to begin confirmation within nblocks blocks.
estimatepriority nblocks
  DEPRECATED. Estimates the approximate priority a zero-fee transaction needs to begin confirmation within nblocks blocks.
estimatesmartfee nblocks
  WARNING: This interface is unstable and may disappear or change! Estimates the approximate fee per kilobyte needed for a transaction to begin confirmation within nblocks blocks if possible and return the number of blocks for which the estimate is valid.
estimatesmartpriority nblocks
  DEPRECATED. WARNING: This interface is unstable and may disappear or change! Estimates the approximate priority a zero-fee transaction needs to begin confirmation within nblocks blocks if possible and return the number of blocks for which the estimate is valid.
signmessagewithprivkey "privkey" "message"
  signmessagewithprivkey "privkey" "message" Sign a message with the private key of an address
validateaddress "address"
  Return information about the given MarteX address.
verifymessage "address" "signature" "message"
  Verify a signed message


Wallet
------

abandontransaction "txid"
  Mark in-wallet transaction <txid> as abandoned This will mark this transaction and all its in-wallet descendants as abandoned which will allow for their inputs to be respent.  It can be used to replace "stuck" or evicted transactions. It only works on transactions which are not included in a block and are not currently in the mempool. It has no effect on transactions which are already conflicted or abandoned.
addmultisigaddress nrequired ["key",...] ( "account" )
  Add a nrequired-to-sign multisignature address to the wallet. Each key is a MarteX address or hex-encoded public key. If 'account' is specified (DEPRECATED), assign address to that account.
backupwallet "destination"
  Safely copies current wallet file to destination, which can be a directory or a path with filename.
checkwallet
  Wallet integrity check.
dumphdinfo
  Returns an object containing sensitive private info about this HD wallet.
dumpprivkey "address"
  Reveals the private key corresponding to 'address'. Then the importprivkey can be used with this output
dumpwallet "filename"
  Dumps all wallet keys in a human-readable format.
fastsendtoaddress "address" amount ( "comment" "comment-to" subtractfeefromamount )
  Send an amount to a given address. The amount is a real and is rounded to the nearest 0.00000001
getaccount "address"
  DEPRECATED. Returns the account associated with the given address.
getaccountaddress "account"
  DEPRECATED. Returns the current MarteX address for receiving payments to this account.
getaddressesbyaccount "account"
  DEPRECATED. Returns the list of addresses for the given account.
getbalance ( "account" minconf addlockconf include_watchonly )
  If account is not specified, returns the server's total available balance. If account is specified (DEPRECATED), returns the balance in the account. Note that the account "" is not the same as leaving the parameter out. The server total may be different to the balance in the default "" account.
getnewaddress ( "account" )
  Returns a new MarteX address for receiving payments. If 'account' is specified (DEPRECATED), it is added to the address book so payments received with the address will be credited to 'account'.
getrawchangeaddress
  Returns a new MarteX address, for receiving change. This is for use with raw transactions, NOT normal use.
getreceivedbyaccount "account" ( minconf addlockconf )
  DEPRECATED. Returns the total amount received by addresses with <account> in transactions with specified minimum number of confirmations.
getreceivedbyaddress "address" ( minconf addlockconf )
  Returns the total amount received by the given address in transactions with at least minconf confirmations.
gettransaction "txid" ( include_watchonly )
  Get detailed information about in-wallet transaction <txid>
getunconfirmedbalance
  Returns the server's total unconfirmed balance
getwalletinfo
  Returns an object containing various wallet state info.
importaddress "address" ( "label" rescan p2sh )
  Adds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend.
importelectrumwallet "filename" index
  Imports keys from an Electrum wallet export file (.csv or .json)
importmulti "requests" "options"
  Import addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options).
importprivkey "martexprivkey" ( "label" ) ( rescan )
  Adds a private key (as returned by dumpprivkey) to your wallet.
importprunedfunds
  Imports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.
importpubkey "pubkey" ( "label" rescan )
  Adds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend.
importwallet "filename"
  Imports keys from a wallet dump file (see dumpwallet).
keepass <genkey|init|setpassphrase>
  keepass <genkey|init|setpassphrase>
keypoolrefill ( newsize )
  Fills the keypool. Requires wallet passphrase to be set with walletpassphrase call.
listaccounts ( minconf addlockconf include_watchonly)
  DEPRECATED. Returns Object that has account names as keys, account balances as values.
listaddressbalances ( minamount )
  Lists addresses of this wallet and their balances
listaddressgroupings
  Lists groups of addresses which have had their common ownership made public by common use as inputs or as the resulting change in past transactions
listlockunspent
  Returns list of temporarily unspendable outputs. See the lockunspent call to lock and unlock transactions for spending.
listreceivedbyaccount ( minconf addlockconf include_empty include_watchonly)
  DEPRECATED. List incoming payments grouped by account.
listreceivedbyaddress ( minconf addlockconf include_empty include_watchonly)
  List incoming payments grouped by receiving address.
listsinceblock ( "blockhash" target_confirmations include_watchonly)
  Get all transactions in blocks since block [blockhash], or all transactions if omitted
listtransactions ( "account" count skip include_watchonly)
  Returns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.
listunspent ( minconf maxconf  ["addresses",...] [include_unsafe] )
  Returns array of unspent transaction outputs with between minconf and maxconf (inclusive) confirmations. Optionally filter to only include txouts paid to specified addresses.
lockunspent unlock ([{"txid":"txid","vout":n},...])
  Updates list of temporarily unspendable outputs. Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs. If no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked. A locked transaction output will not be chosen by automatic coin selection, when spending martexs. Locks are stored in memory only. Nodes start with zero locked outputs, and the locked output list is always cleared (by virtue of process exit) when a node stops or fails. Also see the listunspent call
move "fromaccount" "toaccount" amount ( minconf "comment" )
  DEPRECATED. Move a specified amount from one account in your wallet to another.
removeprunedfunds "txid"
  Deletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will effect wallet balances.
repairwallet
  Wallet repair if any mismatches found.
sendfrom "fromaccount" "toaddress" amount ( minconf addlockconf "comment" "comment_to" )
  DEPRECATED (use sendtoaddress). Sent an amount from an account to a MarteX address. Requires wallet passphrase to be set with walletpassphrase call.
sendmany "fromaccount" {"address":amount,...} ( minconf addlockconf "comment" ["address",...] subtractfeefromamount use_is use_ps )
  Send multiple times. Amounts are double-precision floating point numbers. Requires wallet passphrase to be set with walletpassphrase call.
sendtoaddress "address" amount ( "comment" "comment_to" subtractfeefromamount use_is use_ps )
  Send an amount to a given address.
setaccount "address" "account"
  DEPRECATED. Sets the account associated with the given address.
settxfee amount
  Set the transaction fee per kB. Overwrites the paytxfee parameter.
signmessage "address" "message"
  Sign a message with the private key of an address Requires wallet passphrase to be set with walletpassphrase call.
walletlock
  Removes the wallet encryption key from memory, locking the wallet. After calling this method, you will need to call walletpassphrase again before being able to call any methods which require the wallet to be unlocked.
walletpassphrase "passphrase" timeout ( mixingonly )
  Stores the wallet decryption key in memory for 'timeout' seconds. This is needed prior to performing transactions related to private keys such as sending martexs
walletpassphrasechange "oldpassphrase" "newpassphrase"
  Changes the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.
